package inter;

public class Inter06_Collection {
	public static void main(String[] args) {
		//　숙제 : 컬렉션 프레임워크 이론 정리 면접용 피피티 준비
		
		// 컬렉션 프레임 웍
		// 고정크기의 배열을 다루는 어려움을 해소하기 위해 => 가변크기
		// 객체등의 저장소 = 컬렉션의 요소는 객체만 가능하다 = 기본형은 사용 불가
		// 객체의 개수에 따라서 크기가 자동 조절이 된다
		// 객체의 삽입, 삭제에 따라 객체의 위치가 자동 이동된다
		// 다양한 객체들의 삽입, 삭제, 검색 등의 작업을 쉽게 처리가 가능하게 되었다.
		
		// 질문 : 기본형을 컬렉션에 저장하고 싶을 때가 있어요
		// 기본형 첫 글자를 대문자로 바꾼다
		// byte => 객체 Byte, short => Short, int => Integer, long => Long
		// float => Float, double => Double
		
		// 제네릭이란?
		// 특정 타입만 다루지 않고 여러 종류의 타입(객체)을 다룰 수 있도록 일반화 된 타입 매개변수
		// public void 메서드(매개변수) {}
		
		/**
		 * 컬렉션을 위한 자바 인터페이스의 클래스
		 * 인터페이스 : 추상메서드
		 * 추상메서드 : 선언부만 있고 구현부가 없는 메서드
		 * abstract public void insert(); => 추상 메서드라고 부른다
		 * 종류
		 * list : 순서가 있고, 데이터의 중복을 허용하는 데이터 처리에 적합하다
		 * 例）대기자 명단
		 * 구현 클래스 : ArrayList, LinkedList, Stack, Vector
		 * 
		 * set : 순서를 유지하지 않는 데이터의 집합을 처리할 때 사용, 데이터의 중복을 허용하지 않는다.
		 * 예) 양의 정수집합, 소수의 집합
		 * 구현 클래스 : HashSet, TreeSet
		 * 
		 * map : 키(key)와 값(value)의 쌍으로 이루어진 데이터의 집합을 다룰 때 사용
		 * 순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 데이터 값은 중복을 허용한다
		 * 예) 우편번호, 전화번호(지역번호)
		 * 구현 클래스 : HashMap, HashTable, TreeMap, Properties 등
		 * 
		 * 
		 */
	}
}
